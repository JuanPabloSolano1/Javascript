// Every function - returns true or false based on condition
const all = (array, fn = Boolean) => array.every(fn)
console.log(all([1,2,3,4],x => x > 0))

// Every function - checks is all the elements are the same
const allEqual = arr => arr.every(val => val === arr[0])
console.log(allEqual([1,1,1,1]))

// Every function - checks if the elements are close to each other
// const approximatelyEqual = (v1,v2, epsilon = 1) => v1 - v2 < epsilon
// console.log(approximatelyEqual(2,3))
//
// const arrayToHtmlList = (arr, listID) =>
//   (el => (
//     (el = document.querySelector('#' + listID)),
//     (el.innerHTML += arr.map(item => `<li>${item}</li>`).join(''))
//   ))();

// arrayToHtmlList(['item 1', 'item 2'], 'myListID');

// Average function passing different numbers or array
const average = (...numbers) => numbers.reduce((a,b) => (a+b),0) / numbers.length

console.log(average(...[3,3]))
console.log(average(3,3))

// Function that capitalizes a string
const capitalize = ([first, ...rest]) =>
  first.toUpperCase() + rest.join('');

console.log(capitalize("juan"))

const capitalize1 = (string) =>
string[0].toUpperCase() + string.slice(1,string.length)
console.log(capitalize1("hello"))

// Function that capitalizes every word in an array.
const capitalizeEveryWord = array => array.map(val => val[0].toUpperCase() + val.slice(1,val.length))
console.log(capitalizeEveryWord(["animal", "bird","cobra"]))

// This snippet converts a non-array value into array.
const convertarray = value => value.isArray? value : [value]
console.log(convertarray("foo"))


// Filter null and false values (Compact - Ruby)

const compact = array => array.filter(Boolean)
console.log(compact([false,"sprite",null]))

// Count the number of ocurrences of a value in an array
const countOccurrences = (array,value) => array.reduce((a,b) => (b == value? a + 1 : a),0)
console.log(countOccurrences([1,2,1,3,3,3,3],1))

// Gives the current URL
const currentURL = () => window.location.href;
// currentURL()


// This snippet turns the first letter of a string into lowercase.
const lowercase = (first,...rest) => first.toLowerCase() + rest
console.log(lowercase("Hello"))

// Flatten an array that has multiple brackets
const flatten = array => array.reduce((acc, val) => acc.concat(val), []);
console.log(flatten([1,2,3,[2,3]]))

// Difference between two arrays
const difference = (array1,array2)=>{
  let s = new Set(array2)
  return array1.filter(x => !s.has(x))
}
console.log(difference([1,2,3,5], [1,2,4,6]));

// Filter Duplicate Elements
const duplicate_elements = array => array.filter(i => array.indexOf(i) == array.lastIndexOf(i))
console.log(duplicate_elements([1,2,2,3,4]))

// This snippet returns the first key that satisfies a given function.
const findKey = (obj,fn) => Object.keys(obj).find(key => fn(obj[key]))
console.log(findKey(
  {
    barney: { age: 36, active: true },
    fred: { age: 40, active: false },
    pebbles: { age: 1, active: true }
  },
  o => o["active"]
))

// This snippet returns the last element for which a given function returns a truthy value.
const findLast = (arr, fn) => arr.filter(fn).pop();

console.log(findLast([1,2,3,4], x => x > 3))

// This snippet executes a function for each element of an array starting from the arrayâ€™s last element.
const forEachRight = (arr, callback) =>{
  arr.reverse().forEach(callback)
}
let new_list = []
forEachRight([1,2,3,4], val => new_list.push(val));
console.log(new_list)
